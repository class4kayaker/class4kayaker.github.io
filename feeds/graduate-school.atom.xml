<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jonathan Robey - Graduate School</title><link href="https://www.math.ucdavis.edu/~jrobey/" rel="alternate"></link><link href="https://www.math.ucdavis.edu/~jrobey/feeds/graduate-school.atom.xml" rel="self"></link><id>https://www.math.ucdavis.edu/~jrobey/</id><updated>2019-09-24T10:00:00-07:00</updated><entry><title>Dissertation</title><link href="https://www.math.ucdavis.edu/~jrobey/dissertation-en-US.html" rel="alternate"></link><published>2019-09-24T10:00:00-07:00</published><updated>2019-09-24T10:00:00-07:00</updated><author><name>Jonathan Robey</name></author><id>tag:www.math.ucdavis.edu,2019-09-24:/~jrobey/dissertation-en-US.html</id><summary type="html">Link to disseration</summary><content type="html">&lt;p&gt;&lt;a href="https://www.math.ucdavis.edu/~tdenena/dissertations/201908_Robey_Dissertation.pdf"&gt;Dissertation&lt;/a&gt;&lt;/p&gt;
</content><category term="Graduate School"></category></entry><entry><title>Website Creation</title><link href="https://www.math.ucdavis.edu/~jrobey/grad-student-website-en-US.html" rel="alternate"></link><published>2018-06-05T01:00:00-07:00</published><updated>2018-06-18T16:00:00-07:00</updated><author><name>Jonathan Robey</name></author><id>tag:www.math.ucdavis.edu,2018-06-05:/~jrobey/grad-student-website-en-US.html</id><summary type="html">Basic guide to setting up a webpage</summary><content type="html">&lt;h2 id="initial-choices"&gt;Initial Choices&lt;/h2&gt;
&lt;p&gt;Given that we are producing a site that will be hosted by a department, there is a quite reasonable restriction to static web pages. It would be possible to hand code the whole of the site, but the level of effort would likely be prohibitive.&lt;/p&gt;
&lt;h2 id="selecting-a-static-webpage-generator"&gt;Selecting a Static Webpage Generator&lt;/h2&gt;
&lt;p&gt;A cursory examination of the advertised options shows that there are a large number of static website generators available. Due to personal familiarity, the list was narrowed by requiring the use of Python as the implementing language. &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; was then one of the top options, and was both currently supported and had built in support for extension with plugins.&lt;/p&gt;
&lt;h2 id="creating-the-static-site"&gt;Creating the Static Site&lt;/h2&gt;
&lt;p&gt;There are a few variations from common assumptions that are likely to be relevant in creation of the website. In particular, though the existence of some web posts that are similar to articles or blog entries is likely to be a desirable element, they may not be the main focus (of the website). Additionally, it is likely that there will be a need to include a number of document elements that are frequently used in academic work but are often less formal elsewhere.&lt;/p&gt;
&lt;p&gt;Pelican includes a quickstart script that sets up the basic directory, an initial configuration file, and some other optional elements.&lt;/p&gt;
&lt;h3 id="using-pandoc-to-generate-pages"&gt;Using Pandoc to Generate Pages&lt;/h3&gt;
&lt;p&gt;Given that the page under discussion is intended to be closely related to academic work, the ability to generate citations with an ease of inclusion comparable to LaTeX is a desirable feature. &lt;a href="https://pandoc.org"&gt;Pandoc&lt;/a&gt; is a document conversion tool, that defines a markdown flavor with a number of useful extensions including a citation processor, with said extension being maintained by the same developers as the tool itself. This makes maintaining a good academic references section comparable to the level of difficulty in a LaTeX document.&lt;/p&gt;
&lt;p&gt;It would be possible to use the more official &lt;a href="https://github.com/liob/pandoc_reader"&gt;pandoc_reader&lt;/a&gt; plugin, but there were a few use cases where it was not ideal, and also source repository appears to be somewhat unmaintained. First, I wanted to use Pandoc’s native YAML metadata block for the document data rather than a more fragile externally detected header, which would also have required modification if using Pandoc to render the page outside of Pelican. I also wanted either a single file implementation that I could copy into my private website repository, or a well defined external package.&lt;/p&gt;
&lt;p&gt;As such, I created my own plugin based on existing implementations. When creating the plugin, I did need to add an additional regex based transformation to the output to allow the use of Pelican’s URL transformation directives despite Pandoc doing the correct thing and urlencoding the braces. This implementation was originally maintained as a part of the git directory for this project, but as I wished to mention its use in this post, I felt I should make the implementation more widely available in a manner that would allow easier use by any reader who desired to do so. As such, the implementation is available as a git repository at &lt;a href="https://github.com/class4kayaker/pelican_pandoc_reader"&gt;pelican_pandoc_reader&lt;/a&gt;. The implementation is dependent on the use of a Pandoc version more recent than version 1.16, as the required template variable was introduced then.&lt;/p&gt;
&lt;p&gt;The plugin is designed to be functional as a single file (in particular the &lt;code&gt;__init__.py&lt;/code&gt; file) copied into a plugins directory or installed as a package using a VCS reference.&lt;/p&gt;
&lt;h3 id="creating-content"&gt;Creating content&lt;/h3&gt;
&lt;p&gt;Detailed documentation for creating content for Pelican is available in &lt;a href="http://docs.getpelican.com/en/stable/content.html"&gt;Pelican’s documentation&lt;/a&gt;, and the markdown syntax for Pandoc is available in &lt;a href="https://pandoc.org/MANUAL.html"&gt;the manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In general, content is produced by adding files (in the Pandoc flavor markdown format for the approach discussed here) in the &lt;code&gt;content/&lt;/code&gt; subdirectory of where your local files for the site are.&lt;/p&gt;
&lt;h4 id="about-page-as-base-page"&gt;About Page as Base Page&lt;/h4&gt;
&lt;p&gt;The procedure for this can be found in &lt;a href="http://docs.getpelican.com/en/stable/faq.html#how-can-i-override-the-generated-url-of-a-specific-page-or-article"&gt;Pelican’s FAQ&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="publication-list"&gt;Publication List&lt;/h4&gt;
&lt;p&gt;A standard component of an academic web page is frequently a list of publications including links to the official publication location and possibly an eprint archive. This list could be hand-coded, but it would be preferable to make use of more standard tooling. Given the usecase, it would be preferable to have access to all of the Bibtex keys in the record to allow generation of standard link lists in addition to the formatted entry. As no existing implementation exposes precisely this functionality, a new plugin based on some of the other implementations was created that both produced a &lt;a href="https://citationstyles.org/"&gt;CSL&lt;/a&gt; based formated version and included access to the full record. This plugin is available at &lt;a href="https://github.com/class4kayaker/pelican_publication_list"&gt;pelican_publication_list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As above, the plugin is designed to be functional as a single file (in particular the &lt;code&gt;__init__.py&lt;/code&gt; file) copied into a plugins directory or installed as a package using a VCS reference.&lt;/p&gt;
&lt;h4 id="posts-with-bibliographies"&gt;Posts with Bibliographies&lt;/h4&gt;
&lt;p&gt;If using Pandoc as discussed above, this is rather simple. All that is required is to add &lt;code&gt;bibiliography:path/to/bibfile&lt;/code&gt; and &lt;code&gt;citation-style:path/to/csl&lt;/code&gt; to the YAML metadata block in the markdown for the post. Note that for both the path should be relative to the directory where Pelican is run.&lt;/p&gt;
&lt;p&gt;If you would like the citations to link to the relevant references, then this can be done by specifying &lt;code&gt;--metadata link-references=true&lt;/code&gt;. For the plugin descibed above this is done by adding &lt;code&gt;--metadata&lt;/code&gt; and &lt;code&gt;link-references=true&lt;/code&gt; to Pelican’s &lt;code&gt;PANDOC_ARGS&lt;/code&gt; configuration variable.&lt;/p&gt;
&lt;h4 id="including-math-equations"&gt;Including Math Equations&lt;/h4&gt;
&lt;p&gt;Sadly, the web does not handle including math formulas easily. Pandoc’s native markdown does include syntax for including LaTeX math, but due to standard fragmentation, it requires a command line flag to specify how they should be included in the html. The options that are simplest for a static website are:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href="https://www.mathjax.org/"&gt;MathJax&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;A Javascript based solution to the problem of displaying math in browsers.&lt;/p&gt;
&lt;p&gt;If given the &lt;code&gt;--mathjax&lt;/code&gt; command line flag, Pandoc will write its HTML output to be recognizable by the MathJax script. If using the plugin mentioned above, this can be specified by adding it to Pelican’s &lt;code&gt;PANDOC_ARGS&lt;/code&gt; configuration variable. However, it will also be necessary to add the script to your site.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;&lt;a href="https://www.w3.org/Math/"&gt;MathML&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This is the way to include math defined &lt;a href="https://www.w3.org/TR/html5/semantics-embedded-content.html#mathml"&gt;in the HTML 5 Standard&lt;/a&gt;. However, &lt;a href="https://developer.mozilla.org/en-US/docs/Web/MathML"&gt;according to Mozilla’s site&lt;/a&gt; it is not generally supported by browsers. Thankfully, the MathJax script will also format equations in this format if included.&lt;/p&gt;
&lt;p&gt;If given the &lt;code&gt;--mathml&lt;/code&gt; command line flag, Pandoc will write its HTML output using this format. If using the plugin mentioned above, this can be specified by adding it to Pelican’s &lt;code&gt;PANDOC_ARGS&lt;/code&gt; configuration variable.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="css-layout"&gt;CSS Layout&lt;/h3&gt;
&lt;p&gt;The above work produces a set of web pages that consist solely of HTML, and are likely a purely functional presentation. In modern sites, the presentation of the site is controlled by CSS.&lt;/p&gt;
&lt;p&gt;There are a large number of themes already developed for use with pelican, or it is possible to create your own theme.&lt;/p&gt;
&lt;h4 id="printing-pages"&gt;Printing Pages&lt;/h4&gt;
&lt;p&gt;If it is likely that readers of your site will be printing out some pages, such as if example problem sets are included. If so you may wish to be able to adjust the structure of the site when printing it out. This is possible &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries"&gt;using the CSS media rule&lt;/a&gt;. If you have made use of an external theme, it is likely that this may already have been done by the theme.&lt;/p&gt;
</content><category term="Graduate School"></category></entry><entry><title>Qualifying Exam Examples</title><link href="https://www.math.ucdavis.edu/~jrobey/qual-document-examples-en-US.html" rel="alternate"></link><published>2018-04-29T10:00:00-07:00</published><updated>2018-04-29T10:00:00-07:00</updated><author><name>Jonathan Robey</name></author><id>tag:www.math.ucdavis.edu,2018-04-29:/~jrobey/qual-document-examples-en-US.html</id><summary type="html">Qualifying Exam Documents, to be used as examples</summary><content type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.math.ucdavis.edu/~jrobey/pdfs/proposal.pdf"&gt;Proposal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.math.ucdavis.edu/~jrobey/pdfs/presentation.pdf"&gt;Presentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Graduate School"></category></entry></feed>